// <auto-generated>
//     This code was generated by Refitter.
// </auto-generated>


using Refit;
using System.Collections.Generic;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;

using Microsoft.AspNetCore.JsonPatch;
using Microsoft.AspNetCore.JsonPatch.Operations;

#nullable enable annotations

namespace Granum.IntegrationTests.Generated
{
    [System.CodeDom.Compiler.GeneratedCode("Refitter", "1.6.5.0")]
    public partial interface ICustomersApi
    {
        [Headers("Accept: application/json")]
        [Get("/api/customers")]
        Task<ICollection<Customer>> GetCustomers(CancellationToken cancellationToken = default);

        [Headers("Accept: application/json", "Content-Type: application/json")]
        [Post("/api/customers")]
        Task<Customer> CreateCustomer([Body] CustomerCreate body, CancellationToken cancellationToken = default);

        [Headers("Accept: application/json")]
        [Get("/api/customers/{id}")]
        Task<Customer> GetCustomer(int id, CancellationToken cancellationToken = default);

        [Headers("Content-Type: application/json-patch+json")]
        [Patch("/api/customers/{id}")]
        Task UpdateCustomer(int id, [Body] IEnumerable<object> body, CancellationToken cancellationToken = default);
    }

    [System.CodeDom.Compiler.GeneratedCode("Refitter", "1.6.5.0")]
    public partial interface IContractorsApi
    {
        [Headers("Accept: application/json")]
        [Get("/api/contractors")]
        Task<ICollection<Contractor>> GetContractors(CancellationToken cancellationToken = default);

        [Headers("Accept: application/json", "Content-Type: application/json")]
        [Post("/api/contractors")]
        Task<Contractor> CreateContractor([Body] ContractorCreate body, CancellationToken cancellationToken = default);

        [Headers("Accept: application/json")]
        [Get("/api/contractors/{id}")]
        Task<Contractor> GetContractor(int id, CancellationToken cancellationToken = default);

        [Headers("Content-Type: application/json-patch+json")]
        [Patch("/api/contractors/{id}")]
        Task UpdateContractor(int id, [Body] IEnumerable<object> body, CancellationToken cancellationToken = default);
    }

    [System.CodeDom.Compiler.GeneratedCode("Refitter", "1.6.5.0")]
    public partial interface IServiceLocationsApi
    {
        [Headers("Accept: application/json")]
        [Get("/api/service-locations")]
        Task<ICollection<ServiceLocation>> GetServiceLocations(CancellationToken cancellationToken = default);

        [Headers("Accept: application/json", "Content-Type: application/json")]
        [Post("/api/service-locations")]
        Task<ServiceLocation> CreateServiceLocation([Body] ServiceLocationCreate body, CancellationToken cancellationToken = default);

        [Headers("Accept: application/json")]
        [Get("/api/service-locations/{id}")]
        Task<ServiceLocationWithFeatures> GetServiceLocation(int id, CancellationToken cancellationToken = default);

        [Headers("Content-Type: application/json-patch+json")]
        [Patch("/api/service-locations/{id}")]
        Task UpdateServiceLocation(int id, [Body] IEnumerable<object> body, CancellationToken cancellationToken = default);

        [Delete("/api/service-locations/{id}")]
        Task DeleteServiceLocation(int id, CancellationToken cancellationToken = default);
    }

    [System.CodeDom.Compiler.GeneratedCode("Refitter", "1.6.5.0")]
    public partial interface ILocationFeaturesApi
    {
        [Headers("Accept: application/json")]
        [Get("/api/service-locations/{locationId}/features")]
        Task<ICollection<LocationFeature>> GetLocationFeatures(int locationId, CancellationToken cancellationToken = default);

        [Headers("Accept: application/json", "Content-Type: application/json")]
        [Post("/api/service-locations/{locationId}/features")]
        Task<LocationFeature> CreateLocationFeature(int locationId, [Body] LocationFeatureCreate body, CancellationToken cancellationToken = default);

        [Headers("Accept: application/json")]
        [Get("/api/service-locations/{locationId}/features/{featureId}")]
        Task<LocationFeature> GetLocationFeature(int locationId, int featureId, CancellationToken cancellationToken = default);

        [Headers("Content-Type: application/json-patch+json")]
        [Patch("/api/service-locations/{locationId}/features/{featureId}")]
        Task UpdateLocationFeature(int locationId, int featureId, [Body] IEnumerable<object> body, CancellationToken cancellationToken = default);

        [Delete("/api/service-locations/{locationId}/features/{featureId}")]
        Task DeleteLocationFeature(int locationId, int featureId, CancellationToken cancellationToken = default);
    }

    [System.CodeDom.Compiler.GeneratedCode("Refitter", "1.6.5.0")]
    public partial interface IServiceTypesApi
    {
        [Headers("Accept: application/json")]
        [Get("/api/service-types")]
        Task<ICollection<ServiceType>> GetServiceTypes(CancellationToken cancellationToken = default);

        [Headers("Accept: application/json", "Content-Type: application/json")]
        [Post("/api/service-types")]
        Task<ServiceType> CreateServiceType([Body] ServiceTypeCreate body, CancellationToken cancellationToken = default);

        [Headers("Accept: application/json")]
        [Get("/api/service-types/{id}")]
        Task<ServiceTypeWithFactors> GetServiceType(int id, CancellationToken cancellationToken = default);

        [Headers("Content-Type: application/json-patch+json")]
        [Patch("/api/service-types/{id}")]
        Task UpdateServiceType(int id, [Body] IEnumerable<object> body, CancellationToken cancellationToken = default);

        [Delete("/api/service-types/{id}")]
        Task DeleteServiceType(int id, CancellationToken cancellationToken = default);
    }

    [System.CodeDom.Compiler.GeneratedCode("Refitter", "1.6.5.0")]
    public partial interface IServiceFeatureFactorsApi
    {
        [Headers("Accept: application/json")]
        [Get("/api/service-types/{typeId}/factors")]
        Task<ICollection<ServiceFeatureFactor>> GetServiceFeatureFactors(int typeId, CancellationToken cancellationToken = default);

        [Headers("Accept: application/json", "Content-Type: application/json")]
        [Post("/api/service-types/{typeId}/factors")]
        Task<ServiceFeatureFactor> CreateServiceFeatureFactor(int typeId, [Body] ServiceFeatureFactorCreate body, CancellationToken cancellationToken = default);

        [Headers("Accept: application/json")]
        [Get("/api/service-types/{typeId}/factors/{factorId}")]
        Task<ServiceFeatureFactor> GetServiceFeatureFactor(int typeId, int factorId, CancellationToken cancellationToken = default);

        [Headers("Content-Type: application/json-patch+json")]
        [Patch("/api/service-types/{typeId}/factors/{factorId}")]
        Task UpdateServiceFeatureFactor(int typeId, int factorId, [Body] IEnumerable<object> body, CancellationToken cancellationToken = default);

        [Delete("/api/service-types/{typeId}/factors/{factorId}")]
        Task DeleteServiceFeatureFactor(int typeId, int factorId, CancellationToken cancellationToken = default);
    }

    [System.CodeDom.Compiler.GeneratedCode("Refitter", "1.6.5.0")]
    public partial interface IEstimatesApi
    {
        [Headers("Accept: application/json")]
        [Get("/api/estimates")]
        Task<ICollection<Estimate>> GetEstimates([Query] int? customerId, CancellationToken cancellationToken = default);

        [Headers("Accept: application/json", "Content-Type: application/json")]
        [Post("/api/estimates")]
        Task<Estimate> CreateEstimate([Body] EstimateCreate body, CancellationToken cancellationToken = default);

        [Headers("Accept: application/json")]
        [Get("/api/estimates/{id}")]
        Task<EstimateWithLineItems> GetEstimate(int id, CancellationToken cancellationToken = default);

        [Headers("Content-Type: application/json-patch+json")]
        [Patch("/api/estimates/{id}")]
        Task UpdateEstimate(int id, [Body] IEnumerable<object> body, CancellationToken cancellationToken = default);

        [Delete("/api/estimates/{id}")]
        Task DeleteEstimate(int id, CancellationToken cancellationToken = default);

        [Headers("Accept: application/json")]
        [Post("/api/estimates/{id}/calculate")]
        Task<EstimateCalculation> CalculateEstimate(int id, CancellationToken cancellationToken = default);
    }

    [System.CodeDom.Compiler.GeneratedCode("Refitter", "1.6.5.0")]
    public partial interface ILineItemsApi
    {
        [Headers("Accept: application/json")]
        [Get("/api/estimates/{estimateId}/line-items")]
        Task<ICollection<LineItem>> GetLineItems(int estimateId, CancellationToken cancellationToken = default);

        [Headers("Accept: application/json", "Content-Type: application/json")]
        [Post("/api/estimates/{estimateId}/line-items")]
        Task<LineItem> CreateLineItem(int estimateId, [Body] LineItemCreate body, CancellationToken cancellationToken = default);

        [Headers("Accept: application/json")]
        [Get("/api/estimates/{estimateId}/line-items/{lineItemId}")]
        Task<LineItem> GetLineItem(int estimateId, int lineItemId, CancellationToken cancellationToken = default);

        [Headers("Content-Type: application/json-patch+json")]
        [Patch("/api/estimates/{estimateId}/line-items/{lineItemId}")]
        Task UpdateLineItem(int estimateId, int lineItemId, [Body] IEnumerable<object> body, CancellationToken cancellationToken = default);

        [Delete("/api/estimates/{estimateId}/line-items/{lineItemId}")]
        Task DeleteLineItem(int estimateId, int lineItemId, CancellationToken cancellationToken = default);
    }

    [System.CodeDom.Compiler.GeneratedCode("Refitter", "1.6.5.0")]
    public partial interface IRecurringEventsApi
    {
        [Headers("Accept: application/json")]
        [Get("/api/recurring-events")]
        Task<ICollection<RecurringEvent>> GetRecurringEvents([Query] int? estimateId, [Query] string status, CancellationToken cancellationToken = default);

        [Headers("Accept: application/json", "Content-Type: application/json")]
        [Post("/api/recurring-events")]
        Task<RecurringEvent> CreateRecurringEvent([Body] RecurringEventCreate body, CancellationToken cancellationToken = default);

        [Headers("Accept: application/json")]
        [Get("/api/recurring-events/{id}")]
        Task<RecurringEvent> GetRecurringEvent(int id, CancellationToken cancellationToken = default);

        [Headers("Content-Type: application/json-patch+json")]
        [Patch("/api/recurring-events/{id}")]
        Task UpdateRecurringEvent(int id, [Body] IEnumerable<object> body, CancellationToken cancellationToken = default);

        [Delete("/api/recurring-events/{id}")]
        Task DeleteRecurringEvent(int id, CancellationToken cancellationToken = default);

        [Post("/api/recurring-events/{id}/complete")]
        Task CompleteRecurringEvent(int id, CancellationToken cancellationToken = default);

        [Headers("Accept: application/json", "Content-Type: application/json")]
        [Post("/api/recurring-events/{id}/reschedule")]
        Task<RecurringEvent> RescheduleRecurringEvent(int id, [Body] RescheduleRequest body, CancellationToken cancellationToken = default);
    }

}




#nullable enable
namespace Granum.IntegrationTests.Generated
{
    using System;
    using Microsoft.Extensions.DependencyInjection;
    using Refit;

    public static partial class IServiceCollectionExtensions
    {
        public static IServiceCollection ConfigureRefitClients(
            this IServiceCollection services, 
            Action<IHttpClientBuilder>? builder = default, 
            RefitSettings? settings = default)
        {
            var clientBuilderICustomersApi = services
                .AddRefitClient<ICustomersApi>(settings)
                .ConfigureHttpClient(c => c.BaseAddress = new Uri("http://localhost:5000"));

            builder?.Invoke(clientBuilderICustomersApi);

            var clientBuilderIContractorsApi = services
                .AddRefitClient<IContractorsApi>(settings)
                .ConfigureHttpClient(c => c.BaseAddress = new Uri("http://localhost:5000"));

            builder?.Invoke(clientBuilderIContractorsApi);

            var clientBuilderIServiceLocationsApi = services
                .AddRefitClient<IServiceLocationsApi>(settings)
                .ConfigureHttpClient(c => c.BaseAddress = new Uri("http://localhost:5000"));

            builder?.Invoke(clientBuilderIServiceLocationsApi);

            var clientBuilderILocationFeaturesApi = services
                .AddRefitClient<ILocationFeaturesApi>(settings)
                .ConfigureHttpClient(c => c.BaseAddress = new Uri("http://localhost:5000"));

            builder?.Invoke(clientBuilderILocationFeaturesApi);

            var clientBuilderIServiceTypesApi = services
                .AddRefitClient<IServiceTypesApi>(settings)
                .ConfigureHttpClient(c => c.BaseAddress = new Uri("http://localhost:5000"));

            builder?.Invoke(clientBuilderIServiceTypesApi);

            var clientBuilderIServiceFeatureFactorsApi = services
                .AddRefitClient<IServiceFeatureFactorsApi>(settings)
                .ConfigureHttpClient(c => c.BaseAddress = new Uri("http://localhost:5000"));

            builder?.Invoke(clientBuilderIServiceFeatureFactorsApi);

            var clientBuilderIEstimatesApi = services
                .AddRefitClient<IEstimatesApi>(settings)
                .ConfigureHttpClient(c => c.BaseAddress = new Uri("http://localhost:5000"));

            builder?.Invoke(clientBuilderIEstimatesApi);

            var clientBuilderILineItemsApi = services
                .AddRefitClient<ILineItemsApi>(settings)
                .ConfigureHttpClient(c => c.BaseAddress = new Uri("http://localhost:5000"));

            builder?.Invoke(clientBuilderILineItemsApi);

            var clientBuilderIRecurringEventsApi = services
                .AddRefitClient<IRecurringEventsApi>(settings)
                .ConfigureHttpClient(c => c.BaseAddress = new Uri("http://localhost:5000"));

            builder?.Invoke(clientBuilderIRecurringEventsApi);

            return services;
        }
    }
}